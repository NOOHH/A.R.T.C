@extends('student.student-dashboard.student-dashboard-layout')

@section('title', 'Calendar')

@push('styles')
<link rel="stylesheet" href="{{ asset('css/student/student-calendar.css') }}">
<style>
.calendar-day {
    min-height: 120px;
    border: 1px solid #e9ecef;
    padding: 8px;
    position: relative;
    background: white;
    transition: all 0.2s ease;
}

.calendar-day:hover {
    background-color: #f8f9fa;
}

.calendar-day.today {
    background-color: #e3f2fd;
    border-color: #2196f3;
    font-weight: bold;
}

.calendar-day.has-events {
    background-color: #fff3cd;
    border-color: #ffc107;
}

.day-number {
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 4px;
}

.event-item {
    font-size: 0.75rem;
    padding: 2px 6px;
    margin: 1px 0;
    border-radius: 3px;
    color: white;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    cursor: pointer;
}

.event-item:hover {
    opacity: 0.8;
}

.event-meeting { background-color: #007bff; }
.event-assignment { background-color: #fd7e14; }
.event-announcement { background-color: #20c997; }

.event-counter {
    position: absolute;
    bottom: 4px;
    right: 4px;
    background: #6c757d;
    color: white;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    font-size: 0.7rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
}

.today-schedule-item {
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 8px;
    border-left: 4px solid;
}

.schedule-meeting { 
    background-color: #e3f2fd; 
    border-left-color: #2196f3; 
}

.schedule-assignment { 
    background-color: #fff3e0; 
    border-left-color: #ff9800; 
}

.schedule-announcement { 
    background-color: #e8f5e8; 
    border-left-color: #4caf50; 
}

.loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
@endpush

@section('content')
<div class="container-fluid">
    <div class="row">
        <!-- Main Calendar -->
        <div class="col-lg-9">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="bi bi-calendar3 me-2"></i>Academic Calendar
                    </h4>
                    <div class="d-flex align-items-center">
                        <!-- Debug Test Button -->
                        <button type="button" class="btn btn-warning btn-sm me-3" onclick="testCalendarEndpoints()">
                            <i class="bi bi-bug me-1"></i>Test
                        </button>
                        <div class="calendar-navigation">
                            <button class="btn btn-outline-light btn-sm me-2" id="prevMonth">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <button class="btn btn-light btn-sm me-2" id="todayBtn">Today</button>
                            <span class="current-month fw-bold" id="currentMonth">{{ date('F Y') }}</span>
                            <button class="btn btn-outline-light btn-sm ms-2" id="nextMonth">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card-body p-0">
                    <!-- Calendar Weekdays -->
                    <div class="row g-0 bg-light border-bottom">
                        <div class="col text-center py-2 fw-bold">Sunday</div>
                        <div class="col text-center py-2 fw-bold">Monday</div>
                        <div class="col text-center py-2 fw-bold">Tuesday</div>
                        <div class="col text-center py-2 fw-bold">Wednesday</div>
                        <div class="col text-center py-2 fw-bold">Thursday</div>
                        <div class="col text-center py-2 fw-bold">Friday</div>
                        <div class="col text-center py-2 fw-bold">Saturday</div>
                    </div>
                    
                    <!-- Calendar Days -->
                    <div id="calendarDays">
                        <!-- Calendar days will be generated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Sidebar -->
        <div class="col-lg-3">
            <!-- Today's Schedule -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-calendar-day me-2"></i>Today's Schedule
                    </h5>
                </div>
                <div class="card-body" id="todaySchedule">
                    <div class="text-center">
                        <div class="loading-spinner"></div>
                        <p class="mt-2 mb-0">Loading schedule...</p>
                    </div>
                </div>
            </div>
            
            <!-- Event Legend -->
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="bi bi-info-circle me-2"></i>Event Types
                    </h6>
                </div>
                <div class="card-body">
                    <div class="legend-item">
                        <div class="legend-color event-meeting"></div>
                        <span>Class Meetings</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color event-assignment"></div>
                        <span>Assignment Due</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color event-announcement"></div>
                        <span>Announcements</span>
                    </div>
                </div>
            </div>
            
            <!-- Quick Stats -->
            <div class="card shadow-sm">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="bi bi-bar-chart me-2"></i>This Month
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Meetings:</span>
                        <span class="badge bg-primary" id="meetingCount">0</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Assignments:</span>
                        <span class="badge bg-warning" id="assignmentCount">0</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Announcements:</span>
                        <span class="badge bg-info" id="announcementCount">0</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="eventModalBody">
                <!-- Event details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <div id="eventModalActions">
                    <!-- Action buttons will be added based on event type -->
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@section('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentDate = new Date();
    let currentEvents = [];
    
    // Initialize calendar
    generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
    loadTodaySchedule();
    
    // Navigation event listeners
    document.getElementById('prevMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
    });
    
    document.getElementById('nextMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
    });
    
    document.getElementById('todayBtn').addEventListener('click', () => {
        const today = new Date();
        currentDate = new Date(today);
        generateCalendar(today.getFullYear(), today.getMonth());
    });
    
    function generateCalendar(year, month) {
        const calendarDays = document.getElementById('calendarDays');
        const currentMonthElement = document.getElementById('currentMonth');
        
        // Update month display
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                           'July', 'August', 'September', 'October', 'November', 'December'];
        currentMonthElement.textContent = `${monthNames[month]} ${year}`;
        
        // Get first day and number of days in month
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDayOfWeek = firstDay.getDay();
        
        calendarDays.innerHTML = '';
        
        // Calculate number of weeks needed
        const totalCells = Math.ceil((daysInMonth + startingDayOfWeek) / 7) * 7;
        
        // Generate calendar rows
        for (let week = 0; week < totalCells / 7; week++) {
            const weekRow = document.createElement('div');
            weekRow.className = 'row g-0';
            
            for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
                const cellIndex = week * 7 + dayOfWeek;
                const dayNumber = cellIndex - startingDayOfWeek + 1;
                
                const dayCol = document.createElement('div');
                dayCol.className = 'col';
                
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                if (dayNumber > 0 && dayNumber <= daysInMonth) {
                    dayElement.innerHTML = `<div class="day-number">${dayNumber}</div>`;
                    
                    // Check if this is today
                    const today = new Date();
                    if (year === today.getFullYear() && 
                        month === today.getMonth() && 
                        dayNumber === today.getDate()) {
                        dayElement.classList.add('today');
                    }
                    
                    // Add click handler for day
                    dayElement.addEventListener('click', () => {
                        showDayEvents(year, month, dayNumber);
                    });
                    
                    // Store date for later event population
                    dayElement.dataset.date = `${year}-${String(month + 1).padStart(2, '0')}-${String(dayNumber).padStart(2, '0')}`;
                } else {
                    dayElement.classList.add('empty');
                }
                
                dayCol.appendChild(dayElement);
                weekRow.appendChild(dayCol);
            }
            
            calendarDays.appendChild(weekRow);
        }
        
        // Load events for this month
        loadMonthEvents(year, month);
    }
    
    function loadMonthEvents(year, month) {
        console.log(`📅 Loading events for ${year}-${month + 1}`);
        
        // First try to load real data from the API
        fetch(`/student/calendar/events?year=${year}&month=${month + 1}`)
            .then(response => {
                console.log('📡 Events API Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('📊 Events API Response data:', data);
                if (data.success && data.events && data.events.length > 0) {
                    console.log('✅ Loaded real events from API:', data.events.length);
                    currentEvents = data.events;
                    populateCalendarEvents();
                    updateStats(data.meta || {
                        meetings: data.events.filter(e => e.type === 'meeting').length,
                        assignments: data.events.filter(e => e.type === 'assignment').length,
                        announcements: data.events.filter(e => e.type === 'announcement').length
                    });
                } else {
                    // Fallback to mock data for demo
                    console.log('ℹ️ No real events found, using mock data');
                    const mockEvents = generateMockEvents(year, month);
                    currentEvents = mockEvents;
                    populateCalendarEvents();
                    updateStats({
                        meetings: mockEvents.filter(e => e.type === 'meeting').length,
                        assignments: mockEvents.filter(e => e.type === 'assignment').length,
                        announcements: mockEvents.filter(e => e.type === 'announcement').length
                    });
                }
            })
            .catch(error => {
                console.error('❌ Error loading events from API:', error);
                // Fallback to mock data
                const mockEvents = generateMockEvents(year, month);
                currentEvents = mockEvents;
                populateCalendarEvents();
                updateStats({
                    meetings: mockEvents.filter(e => e.type === 'meeting').length,
                    assignments: mockEvents.filter(e => e.type === 'assignment').length,
                    announcements: mockEvents.filter(e => e.type === 'announcement').length
                });
            });
    }
    
    function generateMockEvents(year, month) {
        const events = [];
        const today = new Date();
        
        // Always generate events for any month being viewed
        for (let day = 1; day <= 31; day++) {
            const eventDate = new Date(year, month, day);
            if (eventDate.getMonth() !== month) continue; // Skip invalid dates
            
            // Add events every few days
            if (day % 3 === 0 || day % 5 === 0 || day % 7 === 0) {
                const eventTypes = ['meeting', 'assignment', 'announcement'];
                const randomType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
                
                let eventTitle, eventDesc;
                switch (randomType) {
                    case 'meeting':
                        eventTitle = day % 2 === 0 ? 'Software Engineering' : 'Database Systems';
                        eventDesc = 'Interactive class session with professor';
                        break;
                    case 'assignment':
                        eventTitle = day % 2 === 0 ? 'Project Submission' : 'Lab Assignment';
                        eventDesc = 'Assignment due date';
                        break;
                    case 'announcement':
                        eventTitle = day % 2 === 0 ? 'Schedule Update' : 'Important Notice';
                        eventDesc = 'New announcement from administration';
                        break;
                }
                
                events.push({
                    id: `${randomType}_${day}_${month}_${year}`,
                    title: eventTitle,
                    start: eventDate.toISOString(),
                    type: randomType,
                    description: eventDesc,
                    program: 'Computer Science',
                    professor: 'Dr. Smith',
                    time: `${8 + (day % 8)}:00 AM`
                });
            }
        }
        
        // Add some special events for current month
        if (year === today.getFullYear() && month === today.getMonth()) {
            // Today's events
            events.push({
                id: 'today_meeting',
                title: 'Morning Standup',
                start: new Date(year, month, today.getDate(), 9, 0).toISOString(),
                type: 'meeting',
                description: 'Daily team meeting',
                program: 'Software Development',
                professor: 'Prof. Johnson',
                time: '9:00 AM'
            });
            
            // Tomorrow's events if valid
            if (today.getDate() + 1 <= new Date(year, month + 1, 0).getDate()) {
                events.push({
                    id: 'tomorrow_assignment',
                    title: 'Final Project Due',
                    start: new Date(year, month, today.getDate() + 1, 23, 59).toISOString(),
                    type: 'assignment',
                    description: 'Final project submission deadline',
                    program: 'Computer Science',
                    professor: 'Dr. Brown',
                    time: '11:59 PM'
                });
            }
        }
        
        console.log(`Generated ${events.length} mock events for ${year}-${month + 1}`);
        return events;
    }
    
    function populateCalendarEvents() {
        console.log(`Populating calendar with ${currentEvents.length} events`);
        
        // Clear existing events
        document.querySelectorAll('.calendar-day').forEach(day => {
            day.classList.remove('has-events');
            const existingEvents = day.querySelectorAll('.event-item, .event-counter');
            existingEvents.forEach(event => event.remove());
        });
        
        // Group events by date
        const eventsByDate = {};
        currentEvents.forEach(event => {
            const eventDate = new Date(event.start).toISOString().split('T')[0];
            if (!eventsByDate[eventDate]) {
                eventsByDate[eventDate] = [];
            }
            eventsByDate[eventDate].push(event);
        });
        
        console.log('Events by date:', eventsByDate);
        
        // Add events to calendar days
        Object.keys(eventsByDate).forEach(date => {
            const dayElement = document.querySelector(`[data-date="${date}"]`);
            console.log(`Looking for day element with date: ${date}`, dayElement);
            
            if (dayElement) {
                dayElement.classList.add('has-events');
                const events = eventsByDate[date];
                
                // Show first 3 events
                events.slice(0, 3).forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = `event-item event-${event.type}`;
                    eventElement.textContent = event.title;
                    eventElement.title = event.description || event.title;
                    eventElement.addEventListener('click', (e) => {
                        e.stopPropagation();
                        showEventDetails(event);
                    });
                    dayElement.appendChild(eventElement);
                });
                
                // Show counter if more than 3 events
                if (events.length > 3) {
                    const counter = document.createElement('div');
                    counter.className = 'event-counter';
                    counter.textContent = `+${events.length - 3}`;
                    counter.addEventListener('click', (e) => {
                        e.stopPropagation();
                        showDayEvents(date);
                    });
                    dayElement.appendChild(counter);
                }
            }
        });
    }
    
    function loadTodaySchedule() {
        console.log('🕐 Loading today schedule...');
        
        // First, try to load real data from the API
        fetch('/student/calendar/today')
            .then(response => {
                console.log('📡 API Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('📊 API Response data:', data);
                if (data.success && data.events && data.events.length > 0) {
                    console.log('✅ Found real events, displaying:', data.events.length);
                    displayTodaySchedule(data.events);
                } else if (data.success === false && data.message === 'Student not found') {
                    console.log('🔒 Authentication required');
                    displayAuthError();
                } else {
                    console.log('ℹ️ No real events found, using mock data for demo');
                    // If no real data, use mock data for demo
                    const today = new Date();
                    const mockTodayEvents = [
                        {
                            id: 'today_1',
                            title: 'Morning Lecture',
                            start: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0).toISOString(),
                            type: 'meeting',
                            description: 'Software Engineering Fundamentals',
                            program: 'Computer Science',
                            professor: 'Dr. Johnson',
                            time: '9:00 AM'
                        },
                        {
                            id: 'today_2',
                            title: 'Assignment Review',
                            start: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0).toISOString(),
                            type: 'assignment',
                            description: 'Database Design Project Review',
                            program: 'Computer Science',
                            professor: 'Prof. Smith',
                            time: '2:00 PM'
                        }
                    ];
                    displayTodaySchedule(mockTodayEvents);
                }
            })
            .catch(error => {
                console.error('❌ Error loading today schedule:', error);
                // Fallback to mock data
                const today = new Date();
                const mockTodayEvents = [
                    {
                        id: 'today_1',
                        title: 'Morning Lecture',
                        start: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0).toISOString(),
                        type: 'meeting',
                        description: 'Software Engineering Fundamentals',
                        program: 'Computer Science',
                        professor: 'Dr. Johnson',
                        time: '9:00 AM'
                    }
                ];
                displayTodaySchedule(mockTodayEvents);
            });
    }
    
    function displayTodaySchedule(events) {
        console.log('📋 Displaying today schedule with events:', events);
        const container = document.getElementById('todaySchedule');
        
        if (!container) {
            console.error('❌ Could not find todaySchedule container');
            return;
        }
        
        if (events.length === 0) {
            console.log('ℹ️ No events to display');
            container.innerHTML = `
                <div class="text-center py-3">
                    <i class="bi bi-calendar-x text-muted" style="font-size: 2rem;"></i>
                    <p class="text-muted mb-0 mt-2">No events scheduled for today</p>
                    <small class="text-muted">Check back tomorrow for new schedule</small>
                </div>
            `;
            return;
        }
        
        const scheduleHtml = events.map(event => {
            const scheduleClass = `schedule-${event.type}`;
            const time = event.time || new Date(event.start).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            return `
                <div class="today-schedule-item ${scheduleClass}" onclick="showEventDetails(${JSON.stringify(event).replace(/"/g, '&quot;')})">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1">${event.title}</h6>
                            <small class="text-muted">${time}</small>
                            ${event.program ? `<br><small class="text-muted">${event.program}</small>` : ''}
                        </div>
                        ${event.type === 'meeting' && event.meeting_url ? 
                            `<a href="${event.meeting_url}" target="_blank" class="btn btn-primary btn-sm">
                                <i class="bi bi-camera-video"></i>
                            </a>` : ''}
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = scheduleHtml;
    }
    
    function displayAuthError() {
        const container = document.getElementById('todaySchedule');
        container.innerHTML = `
            <div class="text-center py-4">
                <i class="bi bi-shield-exclamation text-warning" style="font-size: 2.5rem;"></i>
                <h6 class="mt-3 mb-2 text-warning">Authentication Required</h6>
                <p class="text-muted mb-3">Please log in to view your schedule</p>
                <a href="/login" class="btn btn-primary btn-sm">
                    <i class="bi bi-box-arrow-in-right me-1"></i>Login
                </a>
            </div>
        `;
    }
    
    function updateStats(meta) {
        if (meta) {
            document.getElementById('meetingCount').textContent = meta.meetings || 0;
            document.getElementById('assignmentCount').textContent = meta.assignments || 0;
            document.getElementById('announcementCount').textContent = meta.announcements || 0;
        }
    }
    
    function showEventDetails(event) {
        const modal = new bootstrap.Modal(document.getElementById('eventModal'));
        const modalTitle = document.getElementById('eventModalLabel');
        const modalBody = document.getElementById('eventModalBody');
        const modalActions = document.getElementById('eventModalActions');
        
        modalTitle.textContent = event.title;
        
        let bodyHtml = `
            <div class="row">
                <div class="col-md-6">
                    <strong>Type:</strong> ${event.type.charAt(0).toUpperCase() + event.type.slice(1)}
                </div>
                <div class="col-md-6">
                    <strong>Date:</strong> ${new Date(event.start).toLocaleDateString()}
                </div>
            </div>
            <hr>
        `;
        
        if (event.description) {
            bodyHtml += `<p><strong>Description:</strong><br>${event.description}</p>`;
        }
        
        // Add type-specific information
        if (event.type === 'meeting') {
            bodyHtml += `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Program:</strong> ${event.program}
                    </div>
                    <div class="col-md-6">
                        <strong>Professor:</strong> ${event.professor}
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-6">
                        <strong>Duration:</strong> ${event.duration} minutes
                    </div>
                    <div class="col-md-6">
                        <strong>Status:</strong> <span class="badge bg-primary">${event.status}</span>
                    </div>
                </div>
            `;
            
            modalActions.innerHTML = event.meeting_url ? 
                `<a href="${event.meeting_url}" target="_blank" class="btn btn-primary">
                    <i class="bi bi-camera-video me-2"></i>Join Meeting
                </a>` : '';
        } else if (event.type === 'assignment') {
            bodyHtml += `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Program:</strong> ${event.program}
                    </div>
                    <div class="col-md-6">
                        <strong>Professor:</strong> ${event.professor}
                    </div>
                </div>
                ${event.max_points ? `<p><strong>Max Points:</strong> ${event.max_points}</p>` : ''}
                ${event.instructions ? `<p><strong>Instructions:</strong><br>${event.instructions}</p>` : ''}
            `;
            
            modalActions.innerHTML = '';
        } else if (event.type === 'announcement') {
            bodyHtml += `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Posted by:</strong> ${event.professor}
                    </div>
                    <div class="col-md-6">
                        <strong>Type:</strong> ${event.announcement_type || 'General'}
                    </div>
                </div>
                ${event.content ? `<p><strong>Content:</strong><br>${event.content}</p>` : ''}
                ${event.expire_date ? `<p><strong>Expires:</strong> ${new Date(event.expire_date).toLocaleDateString()}</p>` : ''}
            `;
            
            modalActions.innerHTML = event.video_link ? 
                `<a href="${event.video_link}" target="_blank" class="btn btn-success">
                    <i class="bi bi-play-circle me-2"></i>Watch Video
                </a>` : '';
        }
        
        modalBody.innerHTML = bodyHtml;
        modal.show();
    }
    
    function showDayEvents(dateOrYear, month, day) {
        let targetDate;
        if (typeof dateOrYear === 'string') {
            targetDate = dateOrYear;
        } else {
            targetDate = `${dateOrYear}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        }
        
        const dayEvents = currentEvents.filter(event => {
            const eventDate = new Date(event.start).toISOString().split('T')[0];
            return eventDate === targetDate;
        });
        
        const modal = new bootstrap.Modal(document.getElementById('eventModal'));
        const modalTitle = document.getElementById('eventModalLabel');
        const modalBody = document.getElementById('eventModalBody');
        const modalActions = document.getElementById('eventModalActions');
        
        modalTitle.textContent = `Events for ${new Date(targetDate).toLocaleDateString()}`;
        modalActions.innerHTML = '';
        
        if (dayEvents.length === 0) {
            modalBody.innerHTML = '<p class="text-muted">No events scheduled for this day.</p>';
        } else {
            const eventsHtml = dayEvents.map(event => `
                <div class="border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1">${event.title}</h6>
                            <small class="text-muted">${event.type.charAt(0).toUpperCase() + event.type.slice(1)}</small>
                            ${event.description ? `<p class="mt-2 mb-0">${event.description}</p>` : ''}
                        </div>
                        <button class="btn btn-outline-primary btn-sm" onclick="showEventDetails(${JSON.stringify(event).replace(/"/g, '&quot;')})">
                            View Details
                        </button>
                    </div>
                </div>
            `).join('');
            
            modalBody.innerHTML = eventsHtml;
        }
        
        modal.show();
    }
    
    // Make showEventDetails available globally
    window.showEventDetails = showEventDetails;
    
    // Debug function to test calendar endpoints
    window.testCalendarEndpoints = function() {
        console.log('🧪 Testing Calendar Endpoints...');
        
        // Test 1: Today's schedule
        console.log('1️⃣ Testing /student/calendar/today');
        fetch('/student/calendar/today')
            .then(response => {
                console.log('Today API Status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Today API Response:', data);
                alert('Today API Response: ' + JSON.stringify(data, null, 2));
            })
            .catch(error => {
                console.error('Today API Error:', error);
                alert('Today API Error: ' + error.message);
            });
        
        // Test 2: Current month events
        setTimeout(() => {
            const today = new Date();
            const url = `/student/calendar/events?year=${today.getFullYear()}&month=${today.getMonth() + 1}`;
            console.log('2️⃣ Testing:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Events API Status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Events API Response:', data);
                    alert('Events API Response: ' + JSON.stringify(data, null, 2));
                })
                .catch(error => {
                    console.error('Events API Error:', error);
                    alert('Events API Error: ' + error.message);
                });
        }, 1000);
    };
});
</script>
@endsection
